package team87;

import java.awt.*;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.JToolBar;
import javax.swing.JButton;




public class GUI extends JFrame {
	
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GUI frame = new GUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public GUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		
		JToolBar toolBar = new JToolBar();
		toolBar.setSize(300, 200);
		toolBar.setToolTipText("ToolBar");
		getContentPane().add(toolBar, BorderLayout.NORTH);
		
		JButton btnNewButton = new JButton("New button");
		toolBar.add(btnNewButton);
		
		JButton btnNewButton_1 = new JButton("New button");
		toolBar.add(btnNewButton_1);
		
		Canvas canvas = new myCanvas();
		getContentPane().add(canvas, BorderLayout.CENTER);
		
		
		
	}
	
	
	
	
}
class myCanvas extends Canvas
{
	int mouseX, mouseY;
    int mouseX_dragged, mouseY_dragged;
    boolean mouseDragged;
	myCanvas()
	{
		addMouseListener(myMouseAdapter);
        addMouseMotionListener(myMouseAdapter);
	}
	MouseAdapter myMouseAdapter = new MouseAdapter(){
		 
        @Override
        public void mousePressed(MouseEvent e) {
            mouseX = e.getX();
            mouseY = e.getY();
            mouseDragged = false;
            repaint();
        }
 
        @Override
        public void mouseDragged(MouseEvent e) {
            mouseX_dragged = e.getX();
            mouseY_dragged = e.getY();
            mouseDragged = true;
           
        }
 
    };
	public void paint(Graphics g)
	{
		 Graphics2D graphics2d = (Graphics2D)g;
	        graphics2d.setColor(Color.blue);
	        if(mouseDragged){
	            int x, y;
	            int w, h;
	             
	            if(mouseX > mouseX_dragged){
	                x = mouseX_dragged;
	                w = mouseX - mouseX_dragged;
	            }else{
	                x = mouseX;
	                w = mouseX_dragged - mouseX;
	            }
	             
	            if(mouseY > mouseY_dragged){
	                y = mouseY_dragged;
	                h = mouseY - mouseY_dragged;
	            }else{
	                y = mouseY;
	                h = mouseY_dragged - mouseY;
	            }
	             
	            graphics2d.drawOval(x, y, w, h);
	        }else{
	            graphics2d.fillOval(mouseX-5, mouseY-5, 10, 10);
	        }
	}
}
